# Activity Selection Problem


# You are given n activities with their start and finish times.
# Select the maximum number of activities that can be performed by a single
# person, assuming that a person can only work on a single activity at a time.

# Approach :
# Sort the activities according to their finishing times
# Select the first activity and output it because the first activity taken
# as starting point will always gib=ve the optimum result
# For the remaining items , if the time of starting is greater  than  or equal to
# the time of finishing of previous activity then print it
# update the net start as the finish time of previous activity


def activity_Selection(start, finish):

    # construct a list for activity number
    activity_number = list(enumerate(finish))

    # create a helper list which map activity number and
    # finish times together by sorted finish times
    helper = sorted(activity_number, key=lambda x: x[1])

    # create a new list to store result of sorted start times
    # according to finish times
    sorted_start = []

    # loop through all the finish times and append it to sorted_start
    for i in range(0, len(finish)):
        sorted_start.append(start[helper[i][0]])

    # initialise the first activity as 0
    j = 0

    # print it
    print(helper[j][0])

    # for all activities
    for i in range(1, len(sorted_start)):

        # if the start time of current activity is greater than or
        # equal to the finish time of previous activity
        if sorted_start[i] >= helper[j][1]:

            # print the result
            print(helper[i][0])

            # update the start index
            j = i


# Driver Code
start = [1, 3, 2, 0, 5, 8, 11]
finish = [3, 4, 5, 7, 9, 10, 12]

activity_Selection(start, finish)

# Time Complexity : O(n*log(n))
# Space Complexity : O(1)
